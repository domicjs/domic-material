// Generated by dts-bundle v0.5.0
// Dependencies for this module:
//   ../carbyne

declare module 'carbyne-material' {
    import * as dialog from 'carbyne-material/dialog';
    export { dialog };
    export { default as toast } from 'carbyne-material/toast';
    export { Button, ButtonBar } from 'carbyne-material/button';
    export { Checkbox } from 'carbyne-material/checkbox';
    export { Icon } from 'carbyne-material/icon';
    export { Input } from 'carbyne-material/input';
    export { Radio } from 'carbyne-material/radio';
    export { Toolbar } from 'carbyne-material/toolbar';
    export { Content } from 'carbyne-material/content';
    export { Select } from 'carbyne-material/select';
    export { Tab, TabContainer } from 'carbyne-material/tab';
    export { Child, Row, Column } from 'carbyne-material/flex';
    export { Card } from 'carbyne-material/card';
    export { Nav, NavHeader, NavSubheader, NavDivider, NavItem, NavBody, NavFooter } from 'carbyne-material/nav';
    export { animate, animator, Animator, AnimationSpec, easings } from 'carbyne-material/animate';
    export { scrollable } from 'carbyne-material/scroll';
    export { inkable, inkClickDelay } from 'carbyne-material/ink';
}

declare module 'carbyne-material/dialog' {
    import { O, Controller, Atom, BasicAttributes } from 'carbyne';
    export class DialogCtrl<T> extends Controller {
            promise: Promise<T>;
            _resolve: (v: T) => any;
            _reject: (...a: Array<any>) => any;
            constructor();
            resolve(value: T): void;
            reject(value: any): void;
    }
    export var dialogRootAnimation: (atom: Atom) => Atom;
    export var dialogOverlayAnimation: (atom: Atom) => Atom;
    export var Overlay: (attrs: BasicAttributes, children: string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node) | (string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node))[] | (string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node) | (string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node))[])[]) => Atom;
    export var Title: (attrs: BasicAttributes, children: string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node) | (string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node))[] | (string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node) | (string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node))[])[]) => Atom;
    export var Content: (attrs: BasicAttributes, children: string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node) | (string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node))[] | (string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node) | (string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node))[])[]) => Atom;
    export interface ButtonbarAttributes extends BasicAttributes {
            stacked?: O<boolean>;
    }
    export var Buttonbar: (attrs: ButtonbarAttributes, children: string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node) | (string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node))[] | (string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node) | (string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node))[])[]) => Atom;
    export var Root: (attrs: BasicAttributes, children: string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node) | (string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node))[] | (string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node) | (string | number | boolean | Atom | Node | ((...a: any[]) => string | number | boolean | Atom | Node))[])[]) => Atom;
    export interface DialogOptions {
            parent?: Node;
    }
    export type DialogBuilder<T> = (dlc: DialogCtrl<T>) => Atom;
    /**
        * A function that returns a promise and that allows us to show a nice dialog.
        */
    export function dialog<T>(opts: DialogOptions, cbk: DialogBuilder<T>): Promise<T>;
    export interface ModalOptions extends DialogOptions {
            text: string;
            title: string;
            agree?: string;
            disagree?: string;
    }
    /**
        * A modal dialog.
        * @param  {Object} opts Options
        * @return {Promise}
        */
    export function modal(opts: ModalOptions): Promise<{}>;
}

declare module 'carbyne-material/toast' {
    import { Atom, FnBuilder } from 'carbyne';
    export class Toaster {
        _mounted: boolean;
        _holder: Atom;
        _current: Atom;
        _cancel: number;
        constructor();
        mount(elt: Node, before?: Node): void;
        toast(msg: string | FnBuilder): void;
    }
    var _default: Toaster;
    export default _default;
}

declare module 'carbyne-material/button' {
    import { O, BasicAttributes, Appendable, Atom } from 'carbyne';
    export interface ButtonAttributes extends BasicAttributes {
        disabled?: O<boolean>;
        raised?: O<boolean>;
        click?: (ev: MouseEvent, atom: Atom) => any;
        icon?: O<string>;
    }
    export interface ButtonBarAttributes extends BasicAttributes {
        stacked?: boolean;
    }
    export function ButtonBar(attrs: ButtonBarAttributes, children: Appendable): Atom;
    export function Button(attrs: ButtonAttributes, children: Appendable): Atom;
}

declare module 'carbyne-material/checkbox' {
    import { O, Observable, BasicAttributes, Appendable, Atom } from 'carbyne';
    export interface CheckboxAttributes extends BasicAttributes {
        model: Observable<boolean>;
        disabled?: O<boolean>;
        title?: string;
    }
    export function Checkbox(attrs: CheckboxAttributes, children: Appendable): Atom;
}

declare module 'carbyne-material/icon' {
    import { Atom, Controller, O, BasicAttributes, Appendable } from 'carbyne';
    export class IconController extends Controller {
        name: O<string>;
        constructor(name: O<string>);
        onMount(): void;
    }
    export interface IconAttributes extends BasicAttributes {
        name: O<string>;
    }
    export function Icon(attrs: IconAttributes, content: Appendable): Atom;
}

declare module 'carbyne-material/input' {
    import { Atom, BasicAttributes, Appendable, Observable } from 'carbyne';
    export interface InputAttributes extends BasicAttributes {
        model: Observable<string>;
        type?: string;
        id?: string;
        label?: string;
        placeholder?: string;
        error?: Observable<string>;
    }
    export function Input(attrs: InputAttributes, content: Appendable): Atom;
}

declare module 'carbyne-material/radio' {
    import { Atom, BasicAttributes, Appendable, Observable, O } from 'carbyne';
    export interface RadioAttributes<T> extends BasicAttributes {
        model: Observable<T>;
        value: O<T>;
        title: O<string>;
        disabled?: O<boolean>;
    }
    export function Radio<T>(attrs: RadioAttributes<T>, children: Appendable): Atom;
}

declare module 'carbyne-material/toolbar' {
    import { BasicAttributes, Appendable, Atom } from 'carbyne';
    export function Toolbar(attrs: BasicAttributes, children: Appendable): Atom;
}

declare module 'carbyne-material/content' {
    import { Appendable, Atom } from 'carbyne';
    import { ChildAttributes } from 'carbyne-material/flex';
    export function Content(attrs: ChildAttributes, children: Appendable): Atom;
}

declare module 'carbyne-material/select' {
    import { O, Atom, BasicAttributes, Appendable, Observable } from 'carbyne';
    export type LabelFn<T> = (opt: T) => string;
    export type ChangeFn<T> = (value: T, event: Event, atom: Atom) => any;
    export interface SelectAttributes<T> extends BasicAttributes {
        model: Observable<T>;
        options: O<T[]>;
        labelfn?: LabelFn<T>;
        change?: ChangeFn<T>;
    }
    export function Select<T>(attrs: SelectAttributes<T>, children: Appendable): Atom;
}

declare module 'carbyne-material/tab' {
    import { Controller, Atom, Observable, Builder, BasicAttributes, Appendable } from 'carbyne';
    export class TabsController extends Controller {
        o_render: Observable<Builder>;
        constructor();
    }
    export class TabController extends Controller {
        o_is_active: Observable<boolean>;
        render: Builder;
        constructor(render: Builder);
        onMount(): void;
        activate(): void;
    }
    /**
      * Children are ignored
      */
    export interface TabAttributes extends BasicAttributes {
        title: string;
        render: Builder;
    }
    export function Tab(attrs: TabAttributes, children: Appendable): Atom;
    export function TabContainer(attrs: BasicAttributes, children: Appendable): Atom;
}

declare module 'carbyne-material/flex' {
    import { Atom, BasicAttributes, Appendable } from 'carbyne';
    export interface FlexAttributes extends BasicAttributes {
        wrap?: string;
        direction?: string;
        align?: string;
        reverse?: boolean;
        grow?: string;
        basis?: string;
        justify?: string;
        absoluteGrow?: string;
    }
    export function Row(at: FlexAttributes, ch: Appendable): Atom;
    export function Column(at: FlexAttributes, ch: Appendable): Atom;
    export interface ChildAttributes extends FlexAttributes {
    }
    /**
      * A child that's not a flex itself (otherwise we'd use Row or Column), on which
      * there is hence no point in using the special align-items, ...
      */
    export function Child(at: ChildAttributes, ch: Appendable): Atom;
}

declare module 'carbyne-material/card' {
    import { Atom, BasicAttributes, Appendable } from 'carbyne';
    export function Card(attrs: BasicAttributes, children: Appendable): Atom;
}

declare module 'carbyne-material/nav' {
    import { Atom, BasicAttributes, Appendable, Controller } from 'carbyne';
    export var navRootAnimation: (atom: Atom) => Atom;
    export var navOverlayAnimation: (atom: Atom) => Atom;
    export class NavController extends Controller {
        remove(): void;
    }
    export interface NavAttributes extends BasicAttributes {
    }
    export function Nav(a: NavAttributes, ch: Appendable): Atom;
    export function NavHeader(a: BasicAttributes, ch: Appendable): Atom;
    export function NavSubheader(a: BasicAttributes, ch: Appendable): Atom;
    export function NavDivider(a: BasicAttributes, ch: Appendable): Atom;
    export interface NavItemAttributes extends BasicAttributes {
        icon: string;
        click?: (ev: MouseEvent, atom?: Atom) => (void | boolean);
    }
    export function NavItem(a: NavItemAttributes, ch: Appendable): Atom;
    export function NavBody(a: BasicAttributes, ch: Appendable): Atom;
    export function NavFooter(a: BasicAttributes, ch: Appendable): Atom;
}

declare module 'carbyne-material/animate' {
    import { Controller, Atom } from 'carbyne';
    export class ValueAnimator {
        bezier: (n: number) => number;
        constructor(easing: number[]);
        interval(begin: number, end: number, valuefn?: (v: number) => string): (pct: number) => string;
        from(begin: number, valuefn?: (v: number) => string): (pct: number) => string;
        to(end: number, valuefn?: (v: number) => string): (pct: number) => string;
    }
    export const easings: {
        linear: ValueAnimator;
        ease: ValueAnimator;
        easeIn: ValueAnimator;
        easeOut: ValueAnimator;
        easeInOut: ValueAnimator;
        easeInSine: ValueAnimator;
        easeOutSine: ValueAnimator;
        easeInOutSine: ValueAnimator;
        easeInQuad: ValueAnimator;
        easeOutQuad: ValueAnimator;
        easeInOutQuad: ValueAnimator;
        easeInCubic: ValueAnimator;
        easeOutCubic: ValueAnimator;
        easeInOutCubic: ValueAnimator;
        easeInQuart: ValueAnimator;
        easeOutQuart: ValueAnimator;
        easeInOutQuart: ValueAnimator;
        easeInQuint: ValueAnimator;
        easeOutQuint: ValueAnimator;
        easeInOutQuint: ValueAnimator;
        easeInExpo: ValueAnimator;
        easeOutExpo: ValueAnimator;
        easeInOutExpo: ValueAnimator;
        easeInCirc: ValueAnimator;
        easeOutCirc: ValueAnimator;
        easeInOutCirc: ValueAnimator;
    };
    export interface Props {
        [name: string]: (stamp: number) => string | number;
    }
    export function animate(element: HTMLElement, props: Props, dur: number): Promise<any>;
    export interface AnimationSpec {
        enter?: Props;
        leave?: Props;
        [name: string]: Props;
    }
    export class Animator extends Controller {
        protected specs: AnimationSpec;
        protected duration: number;
        constructor(specs: AnimationSpec, duration?: number);
        onMount(): void;
        onUnmountBefore(): Promise<any>;
    }
    export function animator(specs: AnimationSpec, duration?: number): (atom: Atom) => Atom;
}

declare module 'carbyne-material/scroll' {
    import { Atom } from 'carbyne';
    /**
      * Setup scroll on an atom so that touchstart and touchmove events don't
      * trigger the ugly scroll band.
      *
      * Calling this functions makes anything not marked scrollable as non-scrollable.
      */
    export function scrollable(atom: Atom): Atom;
}

declare module 'carbyne-material/ink' {
    import { Atom } from 'carbyne';
    export function inker(atom: Atom, event?: MouseEvent): void;
    export function inkable(atom: Atom): Atom;
    export type MouseEventCbk = (ev: MouseEvent, atom: Atom) => any;
    export function inkClickDelay(fn: MouseEventCbk): (atom: Atom) => Atom;
}

